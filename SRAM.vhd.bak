LIBRARY IEEE;
LIBRARY ALTERA_MF;
LIBRARY LPM;

USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE ALTERA_MF.ALTERA_MF_COMPONENTS.ALL;
USE LPM.LPM_COMPONENTS.ALL;


ENTITY SRAM IS
	PORT(
		CLOCK          : IN    STD_LOGIC;
		RESET_N        : IN    STD_LOGIC;
		IO_WRITE       : IN    STD_LOGIC;
		SRAM_ADHI_EN   : IN    STD_LOGIC;
		SRAM_ADLOW_EN  : IN    STD_LOGIC;
		SRAM_DATA_EN   : IN    STD_LOGIC;
		IO_DATA        : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		SRAM_ADDR      : OUT   STD_LOGIC_VECTOR(17 DOWNTO 0);
		SRAM_OE_N      : OUT   STD_LOGIC;
		SRAM_DQ        : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		SRAM_WE_N      : OUT   STD_LOGIC;
		SRAM_UB_N      : OUT   STD_LOGIC;
		SRAM_LB_N      : OUT   STD_LOGIC;
		SRAM_CE_N      : OUT   STD_LOGIC
	);
END SRAM;

ARCHITECTURE a of SRAM IS
  TYPE STATE_TYPE IS (
	IDLE, SET_HIGH, SET_LOW, READ_DATA, 
  );
  SIGNAL STATE     : STATE_TYPE;
  SIGNAL SRAM_IN   : STD_LOGIC_VECTOR(15 DOWNTO 0);
  SIGNAL SRAM_OUT  : STD_LOGIC_VECTOR(15 DOWNTO 0);
  SIGNAL SRAM_MODE : STD_LOGIC_VECTOR(3 DOWNTO 0);
  BEGIN
    PROCESS(CLOCK, RESETN)
      BEGIN
        IF RESETN = '0' THEN
          STATE <= IDLE;
        ELSIF (RISING_EDGE(CLOCK)) THEN
		  CASE STATE IS
            WHEN IDLE =>
              IF IO_WRITE = '1' AND SRAM_ADHI_EN = '1' THEN
				STATE <= SET_HIGH;
			  ELSIF
				STATE <= IDLE;
			  END IF;
              
              CASE X IS
                WHEN "00"   =>
					state <= A;
				WHEN "01"   =>
					state <= A;
				WHEN "10"   =>
					state <= B;
                WHEN "11"   =>
					state <= C;
              END CASE;
            WHEN B =>
			  CASE X IS
                WHEN "00"   =>
					state <= B;
                WHEN "01"   =>
					state <= A;
				WHEN "10"   =>
					state <= B;
                WHEN "11"   =>
					state <= C;
              END CASE;
            WHEN C =>
              CASE X IS
                WHEN "00"   =>
					state <= A;
                WHEN "01"   =>
					state <= C;
				WHEN "10"   =>
					state <= B;
				WHEN "11"   =>
					state <= C;

              END CASE;
          END CASE;
        END IF;
      END PROCESS;
    SRAM_CE_N <= '0';
    SRAM_UB_N <= '0';
	SRAM_LB_N <= '0';

		IO_DATA        : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		SRAM_ADDR      : OUT   STD_LOGIC_VECTOR(17 DOWNTO 0);
		SRAM_OE_N      : OUT   STD_LOGIC;
		SRAM_DQ        : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		SRAM_WE_N      : OUT   STD_LOGIC;
  END a;
